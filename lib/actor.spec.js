'use strict';

// sepc.js
var chai = require('chai');
chai.use(require('sinon-chai'));
var Promise = require('bluebird');
var expect = chai.expect;
var sinon = require('sinon');
var _ = require('lodash');
var stream = require('stream');
var proxyquire = require('proxyquire');
var EventEmitter = require('events').EventEmitter;
var errors = require('request-promise/errors');

var actor = require('./actor');

describe('actor', function () {
  var s1, s2, ee;

  beforeEach(function () {
    s1 = new stream.Readable({ objectMode: true, read: sinon.stub() });
    s2 = new stream.Transform({ objectMode: true, highWaterMark: 2 });
    s2._transform = function (d, e, cb) {
      return cb(null, d);
    };
  });

  describe('_write', function () {

    it('calls the callback immediately if the write queue is open', function (done) {
      actor._write(s2, 'foo').then(function () {
        return done();
      });
    });

    it('calls the callback after drain, if the write queue is full', function (done) {

      s2.write = sinon.stub();
      s2.write.returns(false);
      var resolved = false;

      actor._write(s2, 'foo').then(function () {
        resolved = true;
        done();
      });

      setTimeout(function () {
        expect(resolved).to.be.false;
        s2.write.returns(true);
        s2.emit('drain');
      });
    });
  });

  describe('_consume', function () {
    var transform, ee;
    var writeStub = sinon.stub();

    before(function () {
      return sinon.stub(actor, '_write', writeStub);
    });
    beforeEach(function () {
      writeStub.returns(Promise.resolve(null));
      actor._write.reset();
      transform = sinon.stub();
      ee = new EventEmitter();
    });
    after(function () {
      return actor._write.restore();
    });

    it('calls transform with input from stream', function (done) {
      transform.returns(Promise.resolve({}));

      s1.push('url1');
      actor._consume(s1, s2, transform, ee).then(function () {
        expect(transform).to.be.calledWith('url1');
        done();
      });
    });

    it('recurses on itself with passed params while the going is good', function (done) {
      transform.returns(Promise.resolve({ params: 'foo' }));

      s1.push('url1');
      s1.push('url2');
      s1.push(null);

      actor._consume(s1, s2, transform, ee).then(function () {
        expect(transform).to.have.been.calledTwice;
        expect(transform.secondCall.args[1]).to.equal('foo');
        expect(transform.secondCall.args[0]).to.equal('url2');
        done();
      });
    });

    it('rejects when transform throws', function (done) {
      var error = new Error('foo');
      transform.returns(Promise.reject(error));
      s1.push('url1');
      s1.push('url2');
      s1.push(null);

      actor._consume(s1, s2, transform, ee).catch(function (err) {
        expect(actor._write).to.not.have.been.called;
        expect(err).to.equal(error);
        done();
      });
    });
  });

  describe('start', function () {
    var consumeStub = sinon.stub();
    before(function () {
      sinon.stub(actor, '_consume', consumeStub);
    });
    beforeEach(function () {
      actor._consume.reset();
    });
    after(function () {
      return actor._consume.restore();
    });

    it('emits on end event only after the consumer resolves as finished', function (done) {
      var resolve;
      var promise = new Promise(function (_resolve, __) {
        resolve = _resolve;
      });

      consumeStub.returns(promise);

      var ended = false;
      var e = actor.start(s1, s2);
      e.on('end', function () {
        ended = true;
        process.nextTick(function () {
          expect(e.listenerCount('end')).to.equal(0);
          expect(e.listenerCount('error')).to.equal(0);
          done();
        });
      });

      setTimeout(function () {
        expect(ended).to.be.false;
        resolve();
      });
    });

    it('emits an error event if the consumer rejects', function (done) {
      var error = new Error('foo');
      consumeStub.returns(Promise.reject(error));

      var a = actor.start(s1, s2);
      a.on('error', function (err) {
        expect(err).to.equal(error);
        process.nextTick(function () {
          expect(a.listenerCount('error')).to.equal(0);
          done();
        });
      });
    });

    it('emits an error event if consumer throws for any reason', function (done) {
      consumeStub.throws();
      var a = actor.start(s1, s2);
      a.on('error', function (err) {
        expect(err).to.be.an('error');
        process.nextTick(function () {
          expect(a.listenerCount('error')).to.equal(0);
          done();
        });
      });
    });
  });
});
//# sourceMappingURL=data:application/json;base64,