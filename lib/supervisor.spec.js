'use strict';

var chai = require('chai');
chai.use(require('sinon-chai'));
var Promise = require('bluebird');
var expect = chai.expect;
var sinon = require('sinon');
var _ = require('lodash');
var stream = require('stream');
var EventEmitter = require('events').EventEmitter;
var proxyquire = require('proxyquire');

var actorMock = {
  start: sinon.stub()
};

var supervisor = proxyquire('./supervisor', {
  './actor': actorMock
});

describe('supervisor', function () {
  var s1, s2, s3, config;

  beforeEach(function () {
    s1 = new stream.Readable({ objectMode: true, highwaterMark: 2 });
    s1._read = sinon.stub();

    s2 = new stream.Transform({ objectMode: true, highWaterMark: 2 });
    s2._transform = function (d, e, cb) {
      return cb(null, d);
    };

    s3 = new stream.Writable({ objectMode: true });
    s3._write = function () {
      return true;
    };

    config = {
      transform: sinon.stub()
    };

    actorMock.start.reset();
  });

  describe('_startActors', function () {
    var errorCb, endCb, e1, errorEmitter;

    beforeEach(function () {
      errorCb = sinon.stub();
      endCb = sinon.stub();
      e1 = new EventEmitter();
      errorEmitter = new EventEmitter();
    });

    it('recycles, restarts, and reports an error', function (done) {
      var error = new Error('foo');
      error.originalInput = 'bar';
      actorMock.start.returns(e1);

      sinon.stub(s3, 'write', function () {
        return true;
      });

      errorEmitter.on('error', function (err) {
        expect(err).to.be.an('error');

        // give next tick so actor.start gets called again
        process.nextTick(function () {
          expect(s3.write).to.have.been.calledWith('bar');
          expect(actorMock.start).to.have.been.calledTwice;
          expect(actorMock.start.firstCall.args).to.deep.equal([s1, s2, config.transform]);
          done();
        });
      });

      supervisor._startActors(1, s1, s2, s3, errorEmitter, config, endCb);
      e1.emit('error', error);
    });

    it('synchronously starts the number of actors it is asked to start', function () {
      actorMock.start.returns(e1);
      supervisor._startActors(4, s1, s2, s3, errorEmitter, config, endCb);
      expect(actorMock.start.callCount).to.equal(4);
    });
  });

  describe('_runProxies', function () {
    var endCb;

    before(function () {
      var startActorMock = function startActorMock(num, src, dest, rc, ee, config, _endCb) {
        endCb = _endCb;
      };
      sinon.stub(supervisor, '_startActors', startActorMock);
    });

    after(function () {
      return supervisor._startActors.restore();
    });

    it('does not resolve until endCb called enough times', function (done) {
      var resolved = false;

      supervisor._runProxies(s1, s2, { number: 2, errorCount: 1 }, s3).then(function (res) {
        resolved = true;
      });

      endCb();
      setTimeout(function () {
        expect(resolved).to.be.false;
        done();
      });
    });

    it('resolves when the endCb is called and it has called startActors', function () {
      var resolved = false;
      supervisor._runProxies(s1, s2, { number: 2, errorCount: 1 }, s3).then(function (res) {
        resolved = true;
        expect(supervisor._startActors).to.have.been.calledWith(2);
        done();
      });
      endCb();
      endCb();
      expect(resolved).to.be.false;
    });
  });

  describe('start', function () {

    before(function () {
      return sinon.stub(supervisor, '_runProxies');
    });
    beforeEach(function () {
      return supervisor._runProxies.reset();
    });
    after(function () {
      return supervisor._runProxies.restore();
    });

    it('removes the listener so that it doesnt call runProxies more than once', function (done) {
      supervisor._runProxies.returns(new Promise(function (resolve, reject) {
        return true;
      }));
      supervisor.start(s3, config, s1, s2);
      s1.push(1);
      s1.push(2);
      process.nextTick(function () {
        s1.push(3);
        process.nextTick(function () {
          expect(supervisor._runProxies).to.have.been.calledOnce;
          done();
        });
      });
    });

    it('adds a listener to restart after runProxies finishes', function (done) {
      var resolve;
      supervisor._runProxies.returns(new Promise(function (_resolve, reject) {
        return resolve = _resolve;
      }));
      var stream = supervisor.start(s3, config, s1, s2);
      expect(supervisor._runProxies).not.to.have.been.called;
      s1.push(1);

      // this setTimeout simulates the first readable event
      setTimeout(function () {
        expect(supervisor._runProxies).to.have.been.calledOnce;

        // By reading the queue empty, we create the conditions for the
        // readable event to fire again.
        s1.read();
        resolve();
        setTimeout(function () {

          // After we have resolved the promise, simulating the finish of the proxy
          // actors, we push more data onto the queue, simulating new data. This
          // triggers a new readable evetn.
          s1.push(2);

          setTimeout(function () {
            expect(supervisor._runProxies.callCount).to.equal(2);
            done();
          });
        });
      });
    });

    it('returns a readable stream', function (done) {
      var stream = supervisor.start(s3, config);

      stream.on('readable', function () {
        expect(stream.read()).to.equal(1);
        expect(stream.read()).to.equal(2);
        done();
      });

      stream.push(1);
      stream.push(2);
    });
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9zdXBlcnZpc29yLnNwZWMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxJQUFJLE9BQU8sUUFBUSxNQUFSLENBQVA7QUFDSixLQUFLLEdBQUwsQ0FBUyxRQUFRLFlBQVIsQ0FBVDtBQUNBLElBQUksVUFBVSxRQUFRLFVBQVIsQ0FBVjtBQUNKLElBQUksU0FBUyxLQUFLLE1BQUw7QUFDYixJQUFJLFFBQVEsUUFBUSxPQUFSLENBQVI7QUFDSixJQUFJLElBQUksUUFBUSxRQUFSLENBQUo7QUFDSixJQUFJLFNBQVMsUUFBUSxRQUFSLENBQVQ7QUFDSixJQUFJLGVBQWUsUUFBUSxRQUFSLEVBQWtCLFlBQWxCO0FBQ25CLElBQUksYUFBYSxRQUFRLFlBQVIsQ0FBYjs7QUFFSixJQUFJLFlBQVk7QUFDZCxTQUFPLE1BQU0sSUFBTixFQUFQO0NBREU7O0FBSUosSUFBSSxhQUFhLFdBQVcsY0FBWCxFQUEyQjtBQUMxQyxhQUFXLFNBQVg7Q0FEZSxDQUFiOztBQUlKLFNBQVMsWUFBVCxFQUF1QixZQUFNO0FBQzNCLE1BQUksRUFBSixFQUFRLEVBQVIsRUFBWSxFQUFaLEVBQWdCLE1BQWhCLENBRDJCOztBQUczQixhQUFXLFlBQU07QUFDZixTQUFLLElBQUksT0FBTyxRQUFQLENBQWdCLEVBQUUsWUFBWSxJQUFaLEVBQWtCLGVBQWUsQ0FBZixFQUF4QyxDQUFMLENBRGU7QUFFZixPQUFHLEtBQUgsR0FBVyxNQUFNLElBQU4sRUFBWCxDQUZlOztBQUlmLFNBQUssSUFBSSxPQUFPLFNBQVAsQ0FBaUIsRUFBRSxZQUFZLElBQVosRUFBa0IsZUFBZSxDQUFmLEVBQXpDLENBQUwsQ0FKZTtBQUtmLE9BQUcsVUFBSCxHQUFnQixVQUFDLENBQUQsRUFBSSxDQUFKLEVBQU8sRUFBUDthQUFjLEdBQUcsSUFBSCxFQUFTLENBQVQ7S0FBZCxDQUxEOztBQU9mLFNBQUssSUFBSSxPQUFPLFFBQVAsQ0FBZ0IsRUFBRSxZQUFZLElBQVosRUFBdEIsQ0FBTCxDQVBlO0FBUWYsT0FBRyxNQUFILEdBQVksWUFBTTtBQUFFLGFBQU8sSUFBUCxDQUFGO0tBQU4sQ0FSRzs7QUFVZixhQUFTO0FBQ1AsaUJBQVcsTUFBTSxJQUFOLEVBQVg7S0FERixDQVZlOztBQWNmLGNBQVUsS0FBVixDQUFnQixLQUFoQixHQWRlO0dBQU4sQ0FBWCxDQUgyQjs7QUFxQjNCLFdBQVMsY0FBVCxFQUF5QixZQUFNO0FBQzdCLFFBQUksT0FBSixFQUFhLEtBQWIsRUFBb0IsRUFBcEIsRUFBd0IsWUFBeEIsQ0FENkI7O0FBRzdCLGVBQVcsWUFBTTtBQUNmLGdCQUFVLE1BQU0sSUFBTixFQUFWLENBRGU7QUFFZixjQUFRLE1BQU0sSUFBTixFQUFSLENBRmU7QUFHZixXQUFLLElBQUksWUFBSixFQUFMLENBSGU7QUFJZixxQkFBZSxJQUFJLFlBQUosRUFBZixDQUplO0tBQU4sQ0FBWCxDQUg2Qjs7QUFVN0IsT0FBRywwQ0FBSCxFQUErQyxnQkFBUTtBQUNyRCxVQUFJLFFBQVEsSUFBSSxLQUFKLENBQVUsS0FBVixDQUFSLENBRGlEO0FBRXJELFlBQU0sYUFBTixHQUFzQixLQUF0QixDQUZxRDtBQUdyRCxnQkFBVSxLQUFWLENBQWdCLE9BQWhCLENBQXdCLEVBQXhCLEVBSHFEOztBQUtyRCxZQUFNLElBQU4sQ0FBVyxFQUFYLEVBQWUsT0FBZixFQUF3QjtlQUFNO09BQU4sQ0FBeEIsQ0FMcUQ7O0FBT3JELG1CQUFhLEVBQWIsQ0FBZ0IsT0FBaEIsRUFBeUIsZUFBTztBQUM5QixlQUFPLEdBQVAsRUFBWSxFQUFaLENBQWUsRUFBZixDQUFrQixFQUFsQixDQUFxQixPQUFyQjs7O0FBRDhCLGVBSTlCLENBQVEsUUFBUixDQUFpQixZQUFNO0FBQ3JCLGlCQUFPLEdBQUcsS0FBSCxDQUFQLENBQWlCLEVBQWpCLENBQW9CLElBQXBCLENBQXlCLElBQXpCLENBQThCLFVBQTlCLENBQXlDLEtBQXpDLEVBRHFCO0FBRXJCLGlCQUFPLFVBQVUsS0FBVixDQUFQLENBQXdCLEVBQXhCLENBQTJCLElBQTNCLENBQWdDLElBQWhDLENBQXFDLFdBQXJDLENBRnFCO0FBR3JCLGlCQUFPLFVBQVUsS0FBVixDQUFnQixTQUFoQixDQUEwQixJQUExQixDQUFQLENBQ0csRUFESCxDQUNNLElBRE4sQ0FDVyxLQURYLENBQ2lCLENBQUMsRUFBRCxFQUFLLEVBQUwsRUFBUyxPQUFPLFNBQVAsQ0FEMUIsRUFIcUI7QUFLckIsaUJBTHFCO1NBQU4sQ0FBakIsQ0FKOEI7T0FBUCxDQUF6QixDQVBxRDs7QUFvQnJELGlCQUFXLFlBQVgsQ0FBd0IsQ0FBeEIsRUFBMkIsRUFBM0IsRUFBK0IsRUFBL0IsRUFBbUMsRUFBbkMsRUFBdUMsWUFBdkMsRUFBcUQsTUFBckQsRUFBNkQsS0FBN0QsRUFwQnFEO0FBcUJyRCxTQUFHLElBQUgsQ0FBUSxPQUFSLEVBQWlCLEtBQWpCLEVBckJxRDtLQUFSLENBQS9DLENBVjZCOztBQWtDN0IsT0FBRyxnRUFBSCxFQUFxRSxZQUFNO0FBQ3pFLGdCQUFVLEtBQVYsQ0FBZ0IsT0FBaEIsQ0FBd0IsRUFBeEIsRUFEeUU7QUFFekUsaUJBQVcsWUFBWCxDQUF3QixDQUF4QixFQUEyQixFQUEzQixFQUErQixFQUEvQixFQUFtQyxFQUFuQyxFQUF1QyxZQUF2QyxFQUFxRCxNQUFyRCxFQUE2RCxLQUE3RCxFQUZ5RTtBQUd6RSxhQUFPLFVBQVUsS0FBVixDQUFnQixTQUFoQixDQUFQLENBQWtDLEVBQWxDLENBQXFDLEtBQXJDLENBQTJDLENBQTNDLEVBSHlFO0tBQU4sQ0FBckUsQ0FsQzZCO0dBQU4sQ0FBekIsQ0FyQjJCOztBQThEM0IsV0FBUyxhQUFULEVBQXdCLFlBQU07QUFDNUIsUUFBSSxLQUFKLENBRDRCOztBQUc1QixXQUFPLFlBQU07QUFDWCxVQUFJLGlCQUFpQixTQUFqQixjQUFpQixDQUFVLEdBQVYsRUFBZSxHQUFmLEVBQW9CLElBQXBCLEVBQTBCLEVBQTFCLEVBQThCLEVBQTlCLEVBQWtDLE1BQWxDLEVBQTBDLE1BQTFDLEVBQWlEO0FBQ3BFLGdCQUFRLE1BQVIsQ0FEb0U7T0FBakQsQ0FEVjtBQUlYLFlBQU0sSUFBTixDQUFXLFVBQVgsRUFBdUIsY0FBdkIsRUFBdUMsY0FBdkMsRUFKVztLQUFOLENBQVAsQ0FINEI7O0FBVTVCLFVBQU07YUFBTSxXQUFXLFlBQVgsQ0FBd0IsT0FBeEI7S0FBTixDQUFOLENBVjRCOztBQVk1QixPQUFHLGtEQUFILEVBQXVELGdCQUFRO0FBQzdELFVBQUksV0FBVyxLQUFYLENBRHlEOztBQUc3RCxpQkFBVyxXQUFYLENBQXVCLEVBQXZCLEVBQTJCLEVBQTNCLEVBQStCLEVBQUMsUUFBUSxDQUFSLEVBQVcsWUFBWSxDQUFaLEVBQTNDLEVBQTJELEVBQTNELEVBQ0csSUFESCxDQUNRLGVBQU87QUFDWCxtQkFBVyxJQUFYLENBRFc7T0FBUCxDQURSLENBSDZEOztBQVE3RCxjQVI2RDtBQVM3RCxpQkFBVyxZQUFNO0FBQ2YsZUFBTyxRQUFQLEVBQWlCLEVBQWpCLENBQW9CLEVBQXBCLENBQXVCLEtBQXZCLENBRGU7QUFFZixlQUZlO09BQU4sQ0FBWCxDQVQ2RDtLQUFSLENBQXZELENBWjRCOztBQTJCNUIsT0FBRyxpRUFBSCxFQUFzRSxZQUFNO0FBQzFFLFVBQUksV0FBVyxLQUFYLENBRHNFO0FBRTFFLGlCQUFXLFdBQVgsQ0FBdUIsRUFBdkIsRUFBMkIsRUFBM0IsRUFBK0IsRUFBQyxRQUFRLENBQVIsRUFBVyxZQUFZLENBQVosRUFBM0MsRUFBMkQsRUFBM0QsRUFDRyxJQURILENBQ1EsZUFBTztBQUNYLG1CQUFXLElBQVgsQ0FEVztBQUVYLGVBQU8sV0FBVyxZQUFYLENBQVAsQ0FBZ0MsRUFBaEMsQ0FBbUMsSUFBbkMsQ0FBd0MsSUFBeEMsQ0FBNkMsVUFBN0MsQ0FBd0QsQ0FBeEQsRUFGVztBQUdYLGVBSFc7T0FBUCxDQURSLENBRjBFO0FBUTFFLGNBUjBFO0FBUzFFLGNBVDBFO0FBVTFFLGFBQU8sUUFBUCxFQUFpQixFQUFqQixDQUFvQixFQUFwQixDQUF1QixLQUF2QixDQVYwRTtLQUFOLENBQXRFLENBM0I0QjtHQUFOLENBQXhCLENBOUQyQjs7QUF3RzNCLFdBQVMsT0FBVCxFQUFrQixZQUFNOztBQUV0QixXQUFPO2FBQU0sTUFBTSxJQUFOLENBQVcsVUFBWCxFQUF1QixhQUF2QjtLQUFOLENBQVAsQ0FGc0I7QUFHdEIsZUFBVzthQUFNLFdBQVcsV0FBWCxDQUF1QixLQUF2QjtLQUFOLENBQVgsQ0FIc0I7QUFJdEIsVUFBTTthQUFNLFdBQVcsV0FBWCxDQUF1QixPQUF2QjtLQUFOLENBQU4sQ0FKc0I7O0FBTXRCLE9BQUcsdUVBQUgsRUFBNEUsZ0JBQVE7QUFDbEYsaUJBQVcsV0FBWCxDQUF1QixPQUF2QixDQUErQixJQUFJLE9BQUosQ0FBWSxVQUFDLE9BQUQsRUFBVSxNQUFWO2VBQXFCO09BQXJCLENBQTNDLEVBRGtGO0FBRWxGLGlCQUFXLEtBQVgsQ0FBaUIsRUFBakIsRUFBcUIsTUFBckIsRUFBNkIsRUFBN0IsRUFBaUMsRUFBakMsRUFGa0Y7QUFHbEYsU0FBRyxJQUFILENBQVEsQ0FBUixFQUhrRjtBQUlsRixTQUFHLElBQUgsQ0FBUSxDQUFSLEVBSmtGO0FBS2xGLGNBQVEsUUFBUixDQUFpQixZQUFNO0FBQ3JCLFdBQUcsSUFBSCxDQUFRLENBQVIsRUFEcUI7QUFFckIsZ0JBQVEsUUFBUixDQUFpQixZQUFNO0FBQ3JCLGlCQUFPLFdBQVcsV0FBWCxDQUFQLENBQStCLEVBQS9CLENBQWtDLElBQWxDLENBQXVDLElBQXZDLENBQTRDLFVBQTVDLENBRHFCO0FBRXJCLGlCQUZxQjtTQUFOLENBQWpCLENBRnFCO09BQU4sQ0FBakIsQ0FMa0Y7S0FBUixDQUE1RSxDQU5zQjs7QUFvQnRCLE9BQUcsc0RBQUgsRUFBMkQsZ0JBQVE7QUFDakUsVUFBSSxPQUFKLENBRGlFO0FBRWpFLGlCQUFXLFdBQVgsQ0FBdUIsT0FBdkIsQ0FBK0IsSUFBSSxPQUFKLENBQVksVUFBQyxRQUFELEVBQVcsTUFBWDtlQUFzQixVQUFVLFFBQVY7T0FBdEIsQ0FBM0MsRUFGaUU7QUFHakUsVUFBSSxTQUFTLFdBQVcsS0FBWCxDQUFpQixFQUFqQixFQUFxQixNQUFyQixFQUE2QixFQUE3QixFQUFpQyxFQUFqQyxDQUFULENBSDZEO0FBSWpFLGFBQU8sV0FBVyxXQUFYLENBQVAsQ0FBK0IsR0FBL0IsQ0FBbUMsRUFBbkMsQ0FBc0MsSUFBdEMsQ0FBMkMsSUFBM0MsQ0FBZ0QsTUFBaEQsQ0FKaUU7QUFLakUsU0FBRyxJQUFILENBQVEsQ0FBUjs7O0FBTGlFLGdCQVFqRSxDQUFXLFlBQU07QUFDZixlQUFPLFdBQVcsV0FBWCxDQUFQLENBQStCLEVBQS9CLENBQWtDLElBQWxDLENBQXVDLElBQXZDLENBQTRDLFVBQTVDOzs7O0FBRGUsVUFLZixDQUFHLElBQUgsR0FMZTtBQU1mLGtCQU5lO0FBT2YsbUJBQVcsWUFBTTs7Ozs7QUFLZixhQUFHLElBQUgsQ0FBUSxDQUFSLEVBTGU7O0FBT2YscUJBQVcsWUFBTTtBQUNmLG1CQUFPLFdBQVcsV0FBWCxDQUF1QixTQUF2QixDQUFQLENBQXlDLEVBQXpDLENBQTRDLEtBQTVDLENBQWtELENBQWxELEVBRGU7QUFFZixtQkFGZTtXQUFOLENBQVgsQ0FQZTtTQUFOLENBQVgsQ0FQZTtPQUFOLENBQVgsQ0FSaUU7S0FBUixDQUEzRCxDQXBCc0I7O0FBb0R0QixPQUFHLDJCQUFILEVBQWdDLGdCQUFRO0FBQ3RDLFVBQUksU0FBUyxXQUFXLEtBQVgsQ0FBaUIsRUFBakIsRUFBcUIsTUFBckIsQ0FBVCxDQURrQzs7QUFHdEMsYUFBTyxFQUFQLENBQVUsVUFBVixFQUFzQixZQUFNO0FBQzFCLGVBQU8sT0FBTyxJQUFQLEVBQVAsRUFBc0IsRUFBdEIsQ0FBeUIsS0FBekIsQ0FBK0IsQ0FBL0IsRUFEMEI7QUFFMUIsZUFBTyxPQUFPLElBQVAsRUFBUCxFQUFzQixFQUF0QixDQUF5QixLQUF6QixDQUErQixDQUEvQixFQUYwQjtBQUcxQixlQUgwQjtPQUFOLENBQXRCLENBSHNDOztBQVN0QyxhQUFPLElBQVAsQ0FBWSxDQUFaLEVBVHNDO0FBVXRDLGFBQU8sSUFBUCxDQUFZLENBQVosRUFWc0M7S0FBUixDQUFoQyxDQXBEc0I7R0FBTixDQUFsQixDQXhHMkI7Q0FBTixDQUF2QiIsImZpbGUiOiJzdXBlcnZpc29yLnNwZWMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgY2hhaSA9IHJlcXVpcmUoJ2NoYWknKTtcbmNoYWkudXNlKHJlcXVpcmUoJ3Npbm9uLWNoYWknKSk7XG52YXIgUHJvbWlzZSA9IHJlcXVpcmUoJ2JsdWViaXJkJyk7XG52YXIgZXhwZWN0ID0gY2hhaS5leHBlY3Q7XG52YXIgc2lub24gPSByZXF1aXJlKCdzaW5vbicpO1xudmFyIF8gPSByZXF1aXJlKCdsb2Rhc2gnKTtcbnZhciBzdHJlYW0gPSByZXF1aXJlKCdzdHJlYW0nKTtcbnZhciBFdmVudEVtaXR0ZXIgPSByZXF1aXJlKCdldmVudHMnKS5FdmVudEVtaXR0ZXI7XG52YXIgcHJveHlxdWlyZSA9IHJlcXVpcmUoJ3Byb3h5cXVpcmUnKTtcblxudmFyIGFjdG9yTW9jayA9IHtcbiAgc3RhcnQ6IHNpbm9uLnN0dWIoKVxufTtcblxudmFyIHN1cGVydmlzb3IgPSBwcm94eXF1aXJlKCcuL3N1cGVydmlzb3InLCB7XG4gICcuL2FjdG9yJzogYWN0b3JNb2NrXG59KTtcblxuZGVzY3JpYmUoJ3N1cGVydmlzb3InLCAoKSA9PiB7XG4gIHZhciBzMSwgczIsIHMzLCBjb25maWc7XG5cbiAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgczEgPSBuZXcgc3RyZWFtLlJlYWRhYmxlKHsgb2JqZWN0TW9kZTogdHJ1ZSwgaGlnaHdhdGVyTWFyazogMiB9KTtcbiAgICBzMS5fcmVhZCA9IHNpbm9uLnN0dWIoKTtcblxuICAgIHMyID0gbmV3IHN0cmVhbS5UcmFuc2Zvcm0oeyBvYmplY3RNb2RlOiB0cnVlLCBoaWdoV2F0ZXJNYXJrOiAyfSk7XG4gICAgczIuX3RyYW5zZm9ybSA9IChkLCBlLCBjYikgPT4gY2IobnVsbCwgZCk7XG5cbiAgICBzMyA9IG5ldyBzdHJlYW0uV3JpdGFibGUoeyBvYmplY3RNb2RlOiB0cnVlIH0pO1xuICAgIHMzLl93cml0ZSA9ICgpID0+IHsgcmV0dXJuIHRydWUgfTtcblxuICAgIGNvbmZpZyA9IHtcbiAgICAgIHRyYW5zZm9ybTogc2lub24uc3R1YigpXG4gICAgfTtcblxuICAgIGFjdG9yTW9jay5zdGFydC5yZXNldCgpO1xuICB9KTtcblxuXG4gIGRlc2NyaWJlKCdfc3RhcnRBY3RvcnMnLCAoKSA9PiB7XG4gICAgdmFyIGVycm9yQ2IsIGVuZENiLCBlMSwgZXJyb3JFbWl0dGVyO1xuXG4gICAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgICBlcnJvckNiID0gc2lub24uc3R1YigpO1xuICAgICAgZW5kQ2IgPSBzaW5vbi5zdHViKCk7XG4gICAgICBlMSA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgICAgIGVycm9yRW1pdHRlciA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgICB9KTtcblxuICAgIGl0KCdyZWN5Y2xlcywgcmVzdGFydHMsIGFuZCByZXBvcnRzIGFuIGVycm9yJywgZG9uZSA9PiB7XG4gICAgICB2YXIgZXJyb3IgPSBuZXcgRXJyb3IoJ2ZvbycpO1xuICAgICAgZXJyb3Iub3JpZ2luYWxJbnB1dCA9ICdiYXInO1xuICAgICAgYWN0b3JNb2NrLnN0YXJ0LnJldHVybnMoZTEpO1xuXG4gICAgICBzaW5vbi5zdHViKHMzLCAnd3JpdGUnLCAoKSA9PiB0cnVlKTtcblxuICAgICAgZXJyb3JFbWl0dGVyLm9uKCdlcnJvcicsIGVyciA9PiB7XG4gICAgICAgIGV4cGVjdChlcnIpLnRvLmJlLmFuKCdlcnJvcicpO1xuXG4gICAgICAgIC8vIGdpdmUgbmV4dCB0aWNrIHNvIGFjdG9yLnN0YXJ0IGdldHMgY2FsbGVkIGFnYWluXG4gICAgICAgIHByb2Nlc3MubmV4dFRpY2soKCkgPT4ge1xuICAgICAgICAgIGV4cGVjdChzMy53cml0ZSkudG8uaGF2ZS5iZWVuLmNhbGxlZFdpdGgoJ2JhcicpO1xuICAgICAgICAgIGV4cGVjdChhY3Rvck1vY2suc3RhcnQpLnRvLmhhdmUuYmVlbi5jYWxsZWRUd2ljZTtcbiAgICAgICAgICBleHBlY3QoYWN0b3JNb2NrLnN0YXJ0LmZpcnN0Q2FsbC5hcmdzKVxuICAgICAgICAgICAgLnRvLmRlZXAuZXF1YWwoW3MxLCBzMiwgY29uZmlnLnRyYW5zZm9ybV0pXG4gICAgICAgICAgZG9uZSgpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuXG4gICAgICBzdXBlcnZpc29yLl9zdGFydEFjdG9ycygxLCBzMSwgczIsIHMzLCBlcnJvckVtaXR0ZXIsIGNvbmZpZywgZW5kQ2IpO1xuICAgICAgZTEuZW1pdCgnZXJyb3InLCBlcnJvcik7XG4gICAgfSk7XG5cbiAgICBpdCgnc3luY2hyb25vdXNseSBzdGFydHMgdGhlIG51bWJlciBvZiBhY3RvcnMgaXQgaXMgYXNrZWQgdG8gc3RhcnQnLCAoKSA9PiB7XG4gICAgICBhY3Rvck1vY2suc3RhcnQucmV0dXJucyhlMSk7XG4gICAgICBzdXBlcnZpc29yLl9zdGFydEFjdG9ycyg0LCBzMSwgczIsIHMzLCBlcnJvckVtaXR0ZXIsIGNvbmZpZywgZW5kQ2IpO1xuICAgICAgZXhwZWN0KGFjdG9yTW9jay5zdGFydC5jYWxsQ291bnQpLnRvLmVxdWFsKDQpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnX3J1blByb3hpZXMnLCAoKSA9PiB7XG4gICAgdmFyIGVuZENiO1xuXG4gICAgYmVmb3JlKCgpID0+IHtcbiAgICAgIHZhciBzdGFydEFjdG9yTW9jayA9IGZ1bmN0aW9uIChudW0sIHNyYywgZGVzdCwgcmMsIGVlLCBjb25maWcsIF9lbmRDYil7XG4gICAgICAgIGVuZENiID0gX2VuZENiO1xuICAgICAgfVxuICAgICAgc2lub24uc3R1YihzdXBlcnZpc29yLCAnX3N0YXJ0QWN0b3JzJywgc3RhcnRBY3Rvck1vY2spO1xuICAgIH0pO1xuXG4gICAgYWZ0ZXIoKCkgPT4gc3VwZXJ2aXNvci5fc3RhcnRBY3RvcnMucmVzdG9yZSgpKVxuXG4gICAgaXQoJ2RvZXMgbm90IHJlc29sdmUgdW50aWwgZW5kQ2IgY2FsbGVkIGVub3VnaCB0aW1lcycsIGRvbmUgPT4ge1xuICAgICAgdmFyIHJlc29sdmVkID0gZmFsc2U7XG5cbiAgICAgIHN1cGVydmlzb3IuX3J1blByb3hpZXMoczEsIHMyLCB7bnVtYmVyOiAyLCBlcnJvckNvdW50OiAxfSwgczMpXG4gICAgICAgIC50aGVuKHJlcyA9PiB7XG4gICAgICAgICAgcmVzb2x2ZWQgPSB0cnVlO1xuICAgICAgICB9KTtcblxuICAgICAgZW5kQ2IoKTtcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICBleHBlY3QocmVzb2x2ZWQpLnRvLmJlLmZhbHNlO1xuICAgICAgICBkb25lKCk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIGl0KCdyZXNvbHZlcyB3aGVuIHRoZSBlbmRDYiBpcyBjYWxsZWQgYW5kIGl0IGhhcyBjYWxsZWQgc3RhcnRBY3RvcnMnLCAoKSA9PiB7XG4gICAgICB2YXIgcmVzb2x2ZWQgPSBmYWxzZTtcbiAgICAgIHN1cGVydmlzb3IuX3J1blByb3hpZXMoczEsIHMyLCB7bnVtYmVyOiAyLCBlcnJvckNvdW50OiAxfSwgczMpXG4gICAgICAgIC50aGVuKHJlcyA9PiB7XG4gICAgICAgICAgcmVzb2x2ZWQgPSB0cnVlO1xuICAgICAgICAgIGV4cGVjdChzdXBlcnZpc29yLl9zdGFydEFjdG9ycykudG8uaGF2ZS5iZWVuLmNhbGxlZFdpdGgoMik7XG4gICAgICAgICAgZG9uZSgpO1xuICAgICAgICB9KVxuICAgICAgZW5kQ2IoKTtcbiAgICAgIGVuZENiKCk7XG4gICAgICBleHBlY3QocmVzb2x2ZWQpLnRvLmJlLmZhbHNlO1xuICAgIH0pO1xuICB9KTtcblxuXG4gIGRlc2NyaWJlKCdzdGFydCcsICgpID0+IHtcblxuICAgIGJlZm9yZSgoKSA9PiBzaW5vbi5zdHViKHN1cGVydmlzb3IsICdfcnVuUHJveGllcycpKTtcbiAgICBiZWZvcmVFYWNoKCgpID0+IHN1cGVydmlzb3IuX3J1blByb3hpZXMucmVzZXQoKSk7XG4gICAgYWZ0ZXIoKCkgPT4gc3VwZXJ2aXNvci5fcnVuUHJveGllcy5yZXN0b3JlKCkpO1xuXG4gICAgaXQoJ3JlbW92ZXMgdGhlIGxpc3RlbmVyIHNvIHRoYXQgaXQgZG9lc250IGNhbGwgcnVuUHJveGllcyBtb3JlIHRoYW4gb25jZScsIGRvbmUgPT4ge1xuICAgICAgc3VwZXJ2aXNvci5fcnVuUHJveGllcy5yZXR1cm5zKG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHRydWUpKTtcbiAgICAgIHN1cGVydmlzb3Iuc3RhcnQoczMsIGNvbmZpZywgczEsIHMyKTtcbiAgICAgIHMxLnB1c2goMSk7XG4gICAgICBzMS5wdXNoKDIpO1xuICAgICAgcHJvY2Vzcy5uZXh0VGljaygoKSA9PiB7XG4gICAgICAgIHMxLnB1c2goMyk7XG4gICAgICAgIHByb2Nlc3MubmV4dFRpY2soKCkgPT4ge1xuICAgICAgICAgIGV4cGVjdChzdXBlcnZpc29yLl9ydW5Qcm94aWVzKS50by5oYXZlLmJlZW4uY2FsbGVkT25jZTtcbiAgICAgICAgICBkb25lKCk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBpdCgnYWRkcyBhIGxpc3RlbmVyIHRvIHJlc3RhcnQgYWZ0ZXIgcnVuUHJveGllcyBmaW5pc2hlcycsIGRvbmUgPT4ge1xuICAgICAgdmFyIHJlc29sdmU7XG4gICAgICBzdXBlcnZpc29yLl9ydW5Qcm94aWVzLnJldHVybnMobmV3IFByb21pc2UoKF9yZXNvbHZlLCByZWplY3QpID0+IHJlc29sdmUgPSBfcmVzb2x2ZSkpO1xuICAgICAgdmFyIHN0cmVhbSA9IHN1cGVydmlzb3Iuc3RhcnQoczMsIGNvbmZpZywgczEsIHMyKTtcbiAgICAgIGV4cGVjdChzdXBlcnZpc29yLl9ydW5Qcm94aWVzKS5ub3QudG8uaGF2ZS5iZWVuLmNhbGxlZDtcbiAgICAgIHMxLnB1c2goMSk7XG5cbiAgICAgIC8vIHRoaXMgc2V0VGltZW91dCBzaW11bGF0ZXMgdGhlIGZpcnN0IHJlYWRhYmxlIGV2ZW50XG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgZXhwZWN0KHN1cGVydmlzb3IuX3J1blByb3hpZXMpLnRvLmhhdmUuYmVlbi5jYWxsZWRPbmNlO1xuXG4gICAgICAgIC8vIEJ5IHJlYWRpbmcgdGhlIHF1ZXVlIGVtcHR5LCB3ZSBjcmVhdGUgdGhlIGNvbmRpdGlvbnMgZm9yIHRoZVxuICAgICAgICAvLyByZWFkYWJsZSBldmVudCB0byBmaXJlIGFnYWluLlxuICAgICAgICBzMS5yZWFkKCk7XG4gICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG5cbiAgICAgICAgICAvLyBBZnRlciB3ZSBoYXZlIHJlc29sdmVkIHRoZSBwcm9taXNlLCBzaW11bGF0aW5nIHRoZSBmaW5pc2ggb2YgdGhlIHByb3h5XG4gICAgICAgICAgLy8gYWN0b3JzLCB3ZSBwdXNoIG1vcmUgZGF0YSBvbnRvIHRoZSBxdWV1ZSwgc2ltdWxhdGluZyBuZXcgZGF0YS4gVGhpc1xuICAgICAgICAgIC8vIHRyaWdnZXJzIGEgbmV3IHJlYWRhYmxlIGV2ZXRuLlxuICAgICAgICAgIHMxLnB1c2goMik7XG5cbiAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIGV4cGVjdChzdXBlcnZpc29yLl9ydW5Qcm94aWVzLmNhbGxDb3VudCkudG8uZXF1YWwoMik7XG4gICAgICAgICAgICBkb25lKCk7XG4gICAgICAgICAgfSlcblxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG5cbiAgICBpdCgncmV0dXJucyBhIHJlYWRhYmxlIHN0cmVhbScsIGRvbmUgPT4ge1xuICAgICAgdmFyIHN0cmVhbSA9IHN1cGVydmlzb3Iuc3RhcnQoczMsIGNvbmZpZyk7XG5cbiAgICAgIHN0cmVhbS5vbigncmVhZGFibGUnLCAoKSA9PiB7XG4gICAgICAgIGV4cGVjdChzdHJlYW0ucmVhZCgpKS50by5lcXVhbCgxKTtcbiAgICAgICAgZXhwZWN0KHN0cmVhbS5yZWFkKCkpLnRvLmVxdWFsKDIpO1xuICAgICAgICBkb25lKCk7XG4gICAgICB9KTtcblxuICAgICAgc3RyZWFtLnB1c2goMSk7XG4gICAgICBzdHJlYW0ucHVzaCgyKTtcbiAgICB9KTtcblxuICB9KTtcbn0pO1xuIl19